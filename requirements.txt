# requirements.txt
fastapi==0.104.1
uvicorn[standard]==0.24.0
sqlalchemy==2.0.23
psycopg2-binary==2.9.9
pydantic[email]==2.5.0
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-multipart==0.0.6
alembic==1.12.1

# .env.example
DATABASE_URL=postgresql://user:password@localhost:5432/organization_db
SECRET_KEY=your-secret-key-here
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=30

# docker-compose.yml
version: '3.8'

services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: organization_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  api:
    build: .
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@db:5432/organization_db
    depends_on:
      - db

volumes:
  postgres_data:

# Dockerfile
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

# README.md
# Organization Management API

FastAPI implementation of the Organization Management system with comprehensive CRUD operations.

## Features

- Complete REST API for all entities
- PostgreSQL database with SQLAlchemy ORM
- JWT authentication
- Auto-generated API documentation (Swagger UI)
- Docker support

## Setup

### Using Docker

```bash
docker-compose up -d
```

### Local Development

1. Install dependencies:
```bash
pip install -r requirements.txt
```

2. Set up PostgreSQL and update DATABASE_URL in .env

3. Run migrations:
```bash
alembic upgrade head
```

4. Start the server:
```bash
uvicorn main:app --reload
```

## API Documentation

Once running, visit:
- Swagger UI: http://localhost:8000/docs
- ReDoc: http://localhost:8000/redoc

## Project Structure

```
.
├── main.py              # FastAPI application and route handlers
├── models.py            # SQLAlchemy models
├── schemas.py           # Pydantic schemas
├── database.py          # Database configuration
├── requirements.txt     # Python dependencies
├── docker-compose.yml   # Docker Compose configuration
├── Dockerfile          # Docker image definition
└── alembic/            # Database migrations
```

## Available Endpoints

### Organizations
- GET /organizations - List all organizations
- POST /organizations - Create organization
- GET /organizations/{id} - Get organization by ID
- PUT /organizations/{id} - Update organization
- DELETE /organizations/{id} - Delete organization

### Users
- GET /users - List users
- POST /users - Create user
- GET /users/{id} - Get user by ID
- PUT /users/{id} - Update user
- DELETE /users/{id} - Delete user

### Roles & Permissions
- GET /roles - List roles
- POST /roles - Create role
- GET /permissions - List permissions
- POST /user-roles - Assign role to user
- POST /role-permissions - Assign permission to role

### Programs & Campaigns
- GET /programs - List programs
- POST /campaigns - Create campaign
- And more...

### Donations & Payments
- GET /donations - List donations with filters
- POST /donations - Create donation
- GET /payments - List payments
- POST /payments - Process payment

### Parties (Donors/Beneficiaries)
- GET /parties - List parties
- POST /parties - Create party
- GET /pledges - List pledges
- POST /pledges - Create pledge

## Database Migrations

Create a new migration:
```bash
alembic revision --autogenerate -m "Description"
```

Apply migrations:
```bash
alembic upgrade head
```

Rollback migrations:
```bash
alembic downgrade -1
```

## Authentication

The API uses JWT bearer token authentication. Include the token in the Authorization header:

```
Authorization: Bearer <your-token>
```

## Testing

Run tests:
```bash
pytest
```

## License

MIT